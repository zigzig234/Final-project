---
- name: Setup Prometheus, Grafana, and Telegraf on EKS
  hosts: localhost
  become: yes
  tasks:
    
    # Step 1: Install Helm
    - name: Download Helm binary
      get_url:
        url: "https://get.helm.sh/helm-v3.8.2-linux-amd64.tar.gz"
        dest: "/tmp/helm.tar.gz"

    - name: Unarchive Helm binary
      unarchive:
        src: "/tmp/helm.tar.gz"
        dest: "/usr/local/bin/"
        remote_src: yes

    - name: Clean up Helm tar.gz
      file:
        path: "/tmp/helm.tar.gz"
        state: absent

    # Step 2.1: Install Prometheus using Helm
    - name: Add Prometheus Helm repository
      command: helm repo add prometheus-community https://prometheus-community.github.io/helm-charts

    - name: Update Helm repositories
      command: helm repo update

    - name: Install Prometheus
      command: helm install prometheus prometheus-community/prometheus \
                --namespace monitoring \
                --create-namespace \
                --set server.global.scrape_interval="15s"
      ignore_errors: true

    # Step 3.1: Install Grafana using Helm
    - name: Add Grafana Helm repository
      command: helm repo add grafana https://grafana.github.io/helm-charts

    - name: Update Helm repositories
      command: helm repo update

    - name: Install Grafana
      command: helm install grafana grafana/grafana \
                --namespace monitoring \
                --set adminPassword=admin \
                --set service.type=LoadBalancer
      ignore_errors: true

    # Step 4: Deploy Telegraf
    - name: Create Telegraf ConfigMap
      kubernetes.core.k8s:
        definition: |
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: telegraf-config
            namespace: monitoring
          data:
            telegraf.conf: |
              [[outputs.prometheus_client]]
                listen = ":9273"
              [[inputs.cpu]]
                percpu = true
      register: telegraf_configmap

    - name: Deploy Telegraf DaemonSet
      kubernetes.core.k8s:
        definition: |
          apiVersion: apps/v1
          kind: DaemonSet
          metadata:
            name: telegraf
            namespace: monitoring
          spec:
            selector:
              matchLabels:
                app: telegraf
            template:
              metadata:
                labels:
                  app: telegraf
              spec:
                containers:
                - name: telegraf
                  image: telegraf:latest
                  env:
                    - name: HOSTNAME
                      valueFrom:
                        fieldRef:
                          fieldPath: spec.nodeName
                  volumeMounts:
                    - name: telegraf-config
                      mountPath: /etc/telegraf/telegraf.conf
                      subPath: telegraf.conf
                volumes:
                  - name: telegraf-config
                    configMap:
                      name: telegraf-config
      register: telegraf_daemonset

    # Step 5: Expose Grafana Service via LoadBalancer
    - name: Expose Grafana via LoadBalancer
      kubernetes.core.k8s:
        definition: |
          apiVersion: v1
          kind: Service
          metadata:
            name: grafana
            namespace: monitoring
          spec:
            selector:
              app: grafana
            ports:
              - protocol: TCP
                port: 80
                targetPort: 3000
            type: NodePort

